// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/15/2020 01:02:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [15:0] INPUT;
// wires                                               
wire CARRYOUT;
wire cntenpc;
wire EXEC1;
wire EXEC2;
wire EXEC3;
wire FETCH;
wire [15:0] OUTPUT;
wire [15:0] r0;
wire [15:0] r1;
wire [15:0] r2;
wire [15:0] r3;
wire [15:0] RAMout;
wire [10:0] ROMaddress;
wire [15:0] ROMout;

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.CARRYOUT(CARRYOUT),
	.CLK(CLK),
	.cntenpc(cntenpc),
	.EXEC1(EXEC1),
	.EXEC2(EXEC2),
	.EXEC3(EXEC3),
	.FETCH(FETCH),
	.\INPUT (INPUT),
	.\OUTPUT (OUTPUT),
	.r0(r0),
	.r1(r1),
	.r2(r2),
	.r3(r3),
	.RAMout(RAMout),
	.ROMaddress(ROMaddress),
	.ROMout(ROMout)
);
initial 
begin 
#3000000 $finish;
end 

// CLK
initial
begin
	repeat(272)
	begin
		CLK = 1'b0;
		CLK = #5500 1'b1;
		# 5500;
	end
	CLK = 1'b0;
	CLK = #5500 1'b1;
end 
// \INPUT [ 15 ]
initial
begin
	INPUT[15] = 1'b0;
end 
// \INPUT [ 14 ]
initial
begin
	INPUT[14] = 1'b0;
end 
// \INPUT [ 13 ]
initial
begin
	INPUT[13] = 1'b0;
end 
// \INPUT [ 12 ]
initial
begin
	INPUT[12] = 1'b0;
end 
// \INPUT [ 11 ]
initial
begin
	INPUT[11] = 1'b0;
end 
// \INPUT [ 10 ]
initial
begin
	INPUT[10] = 1'b0;
end 
// \INPUT [ 9 ]
initial
begin
	INPUT[9] = 1'b0;
end 
// \INPUT [ 8 ]
initial
begin
	INPUT[8] = 1'b0;
end 
// \INPUT [ 7 ]
initial
begin
	INPUT[7] = 1'b0;
end 
// \INPUT [ 6 ]
initial
begin
	INPUT[6] = 1'b0;
end 
// \INPUT [ 5 ]
initial
begin
	INPUT[5] = 1'b0;
end 
// \INPUT [ 4 ]
initial
begin
	INPUT[4] = 1'b0;
end 
// \INPUT [ 3 ]
initial
begin
	INPUT[3] = 1'b1;
end 
// \INPUT [ 2 ]
initial
begin
	INPUT[2] = 1'b0;
end 
// \INPUT [ 1 ]
initial
begin
	INPUT[1] = 1'b0;
end 
// \INPUT [ 0 ]
initial
begin
	INPUT[0] = 1'b0;
end 
endmodule

